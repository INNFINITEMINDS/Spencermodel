// Trying to reconstruct Spencer's model of Octopus cells (Spencer et al 2012)
// using their article. Note that their model may not be appropriate
// because real dendritic tree *violate* the Rall's '3/2' power low, so it  can
// not be represented with a few unic cylinders. Don't know if it can cause
// uncertaintes in currents.

// Active conductances: | Soma {Gklt, Gkht, Gh}  | Dends {Gklt, Gh, Gsyn} |
//                      | Axon {None -- myelin?} | Initial {Gna}          |

// [Gh] Bal & Oertel, 2000 (params: celcius = 33, frac = 1)
// [Gklt] Rothman & Manis, 2003 (params: celcius = 33, ek = -70, gkltbar = 0.0407)
// [Ghlt] Rothman & Manis, 2003 (params: celcius = 33, ek = -70, gkltbar = 0.0061)
// [Gna] Rothman & Manis, 2003
// [Gnas] Rothman et al. 1993 (referenced in Spencer et al. 2012)
// [Gsyn] 


// Their model includes values of parameters that mostly reflect experimentaly
// observed in cat


create soma, initial, axon, dend[4]

soma {
    nseg = 1
    diam = 25
    L = 25
    //insert hcno
    insert hs
    
    //insert klt 
    insert kltoz
    
    //insert kht
    insert khtoz
    ek = -70
}

axon {
    nseg = 1
    diam = 3
    L = 30
}

initial {
    nseg = 1
    diam = 3
    L = 2
    
    insert jsrnaf
    gnac_jsrnaf = 4.2441
    
    //insert nas
    //gbar_nas = 4.244
    ena = 55
}

for i = 0, 3 {
    dend[i] {
	nseg = 20
	diam = 3
	L = 280
	
	//insert hcno
	insert hs 
	ghbar_hs = 0.0006
	
	//insert klt
	insert kltoz
	ek = -70 
	gbar_kltoz = 0.0027 // from Spencer et al., 2012, Table 3
	
	//THERE IS NO KHT CONDUCTANCE IN DENDS IN Spencer et al 2012//
	
    }
}

forall {
    insert leak
    //e_pas = -62 // mV. Golding et al. 1999; Bal & Oertel 2001
    //g_pas = 0.002 // S/cm^2. Calculated from time constant and cell capasitance
    // values from Bal & Oertel, 2000; Bal & Baydas 2009
    
    //insert hh
    cm = 0.9 // uF/cm^2
    Ra = 100 // mho*cm
}
// ------------------- DENDRITIC INNERVATION --------------------------- //

ndstim = 300
objref dstim[ndstim]

delay = 0.03

for i = 0, ((ndstim/4)-1) {
    dend[0] dstim[i] = new syn(0.0133*( i + 1 ))
    dstim[i].onset = 250  - delay*i
}

for i = ndstim/4 , ((ndstim/2)-1) {
    dend[1] dstim[i] = new syn(0.0133*( i - ((ndstim/4)-1) ))
    dstim[i].onset = 250  - delay*(i - (ndstim/4))
}

for i = ndstim/2, ((ndstim*3/4)-1) {
    dend[2] dstim[i] = new syn(0.0133*( i - ((ndstim/2)-1) ))
    dstim[i].onset = 250  - delay*(i - (ndstim/2))
}

for i = ndstim*3/4, (ndstim-1) {
    dend[3] dstim[i] = new syn(0.0133*( i - ((ndstim*3/4)-1) ))
    dstim[i].onset = 250  - delay*(i - (ndstim*3/4))
}

//The function dendstim() takes the activation times of the
//dstims mimicing real innervation of ocopus cells by ANFs:

proc dendstim() { 
}

    

// ------------------- CONNECT THINGS TOGETHER ------------------------- //
 
connect initial(1), axon(0)
connect axon(1), soma(0)

for i = 0, 3 {
    connect dend[i](0), soma(1)
}



tstop = 500
celsius = 37


// ------------------ PICTURES ---------------------------------------- //

// soma & initial v(t)

objref pic, pic1

pic = new Graph()

addplot(pic, 0)
pic.size(0, 500, -70, 20)
pic.addvar("soma.v(.5)", 3, 1)
pic.addvar("initial.v(.5)", 2, 1)

//dendritic innervation, dend[1].v = f(space)

pic1 = new Graph()

addplot(pic1, 0)
pic1.size(180, 200, -62, -55)
pic1.addvar("dend[1].v(.5)", 1, 1)
pic1.addvar("soma.v(.5)", 3, 1)
pic1.addvar("initial.v(.5)", 2, 1)


// ------------------ SOMATIC INNERVATION: stimtrain, stairs, stm1 ----- //

objref stim[5], stm, st[2]

for i = 0, 4 { soma stim[i] = new IClamp(.5) }

for i = 0, 1 { soma st[i] = new IClamp(.5) }

soma stm = new IClamp(.5)

proc stimtrain() { local amp, dur, interval,  del
    amp = $1 // current pulses' amplitude
    dur = $2 // current pulses' duration
    interval = $3 // time interval between current pulses
    del = $4 // delay 
    
    for i = 0, 4 {
	
	stim[i].dur = dur
	stim[i].amp = amp
	stim[i].del = del + i*interval
    }
    
    stm.amp = 0
    for i =0, 1 { st[i].amp = 0 }
    run()
}

proc stairs() { local amp1, amp2, dur1, dur2, interval, del  
    // current steps 1/2 superimposed
    amp1 = $1
    amp2 = $2
    dur1 = $3
    dur2 = $4
    interval = $5
    del = $6
    
    
    st[0].amp = amp1 // nA
    st[0].dur = dur1
    st[0].del = del
    
    st[1].amp = amp2
    st[1].dur = dur2
    st[1].del = del + interval
    
    stm.amp = 0
    for i =0, 4 { stim[i].amp = 0 }

    run()
}

proc stm1() { local amp, dur, del
    amp = $1
    dur = $2
    del = $3
    
   
    stm.amp = amp
    stm.dur = dur
    stm.del = del
    
    for i =0, 1 { st[i].amp = 0 }
    for i =0, 4 { stim[i].amp = 0 }
    run()
}
